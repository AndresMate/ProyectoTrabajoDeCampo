#!/bin/bash

# ==============================================
# Script de Migraci√≥n a Identidad Visual UPTC
# ==============================================
# Este script automatiza el proceso de actualizaci√≥n
# de colores seg√∫n el Manual de Identidad Gr√°fica UPTC 2022
#
# Uso: ./migrate-to-uptc-identity.sh
# ==============================================

echo "üé® Iniciando migraci√≥n a Identidad Visual UPTC..."
echo ""

# Colores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Contador de cambios
CHANGES=0

# ==============================================
# 1. BACKUP
# ==============================================
echo "üì¶ Creando backup..."
BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp -r src "$BACKUP_DIR/"
echo -e "${GREEN}‚úì${NC} Backup creado en: $BACKUP_DIR"
echo ""

# ==============================================
# 2. MIGRACI√ìN DE COLORES DE FONDO
# ==============================================
echo "üé® Actualizando colores de fondo..."

# bg-blue-900 ‚Üí bg-uptc-black
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/bg-blue-900/bg-uptc-black/g' {} \;
COUNT=$(find src/ -name "*.bak" | wc -l)
CHANGES=$((CHANGES + COUNT))
echo -e "${GREEN}‚úì${NC} bg-blue-900 ‚Üí bg-uptc-black: $COUNT archivos"

# bg-blue-800 ‚Üí bg-uptc-black (hover)
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/bg-blue-800/bg-gray-800/g' {} \;
echo -e "${GREEN}‚úì${NC} bg-blue-800 ‚Üí bg-gray-800: hover states"

# bg-blue-700 ‚Üí bg-uptc-black
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/bg-blue-700/bg-uptc-black/g' {} \;
echo -e "${GREEN}‚úì${NC} bg-blue-700 ‚Üí bg-uptc-black"

# bg-yellow-400 ‚Üí bg-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/bg-yellow-400/bg-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} bg-yellow-400 ‚Üí bg-uptc-yellow"

# bg-yellow-500 ‚Üí bg-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/bg-yellow-500/bg-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} bg-yellow-500 ‚Üí bg-uptc-yellow"

echo ""

# ==============================================
# 3. MIGRACI√ìN DE COLORES DE TEXTO
# ==============================================
echo "‚úçÔ∏è  Actualizando colores de texto..."

# text-blue-900 ‚Üí text-uptc-black
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/text-blue-900/text-uptc-black/g' {} \;
echo -e "${GREEN}‚úì${NC} text-blue-900 ‚Üí text-uptc-black"

# text-blue-800 ‚Üí text-uptc-black
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/text-blue-800/text-uptc-black/g' {} \;
echo -e "${GREEN}‚úì${NC} text-blue-800 ‚Üí text-uptc-black"

# text-yellow-400 ‚Üí text-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/text-yellow-400/text-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} text-yellow-400 ‚Üí text-uptc-yellow"

echo ""

# ==============================================
# 4. MIGRACI√ìN DE BORDES
# ==============================================
echo "üî≤ Actualizando colores de bordes..."

# border-blue-900 ‚Üí border-uptc-yellow (destacados)
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/border-blue-900/border-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} border-blue-900 ‚Üí border-uptc-yellow"

# border-blue-500 ‚Üí border-uptc-yellow (focus)
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/border-blue-500/border-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} border-blue-500 ‚Üí border-uptc-yellow"

echo ""

# ==============================================
# 5. MIGRACI√ìN DE RING (FOCUS STATES)
# ==============================================
echo "üíç Actualizando estados de foco..."

# ring-blue-500 ‚Üí ring-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/ring-blue-500/ring-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} ring-blue-500 ‚Üí ring-uptc-yellow"

# ring-blue-900 ‚Üí ring-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/ring-blue-900/ring-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} ring-blue-900 ‚Üí ring-uptc-yellow"

echo ""

# ==============================================
# 6. MIGRACI√ìN DE HOVER STATES
# ==============================================
echo "üëÜ Actualizando estados hover..."

# hover:bg-blue-800 ‚Üí hover:bg-gray-800
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/hover:bg-blue-800/hover:bg-gray-800/g' {} \;
echo -e "${GREEN}‚úì${NC} hover:bg-blue-800 ‚Üí hover:bg-gray-800"

# hover:text-blue-900 ‚Üí hover:text-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/hover:text-blue-900/hover:text-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} hover:text-blue-900 ‚Üí hover:text-uptc-yellow"

# hover:border-blue-400 ‚Üí hover:border-uptc-yellow
find src/ -type f \( -name "*.tsx" -o -name "*.ts" -o -name "*.jsx" -o -name "*.js" \) \
  -exec sed -i.bak 's/hover:border-blue-400/hover:border-uptc-yellow/g' {} \;
echo -e "${GREEN}‚úì${NC} hover:border-blue-400 ‚Üí hover:border-uptc-yellow"

echo ""

# ==============================================
# 7. LIMPIEZA DE ARCHIVOS BACKUP
# ==============================================
echo "üßπ Limpiando archivos temporales..."
find src/ -name "*.bak" -delete
echo -e "${GREEN}‚úì${NC} Archivos .bak eliminados"
echo ""

# ==============================================
# 8. VERIFICACI√ìN
# ==============================================
echo "üîç Verificando migraci√≥n..."
echo ""

# Contar referencias a colores antiguos
BLUE_REFS=$(grep -r "blue-[789]00" src/ --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l)
OLD_YELLOW=$(grep -r "yellow-[45]00" src/ --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l)

if [ "$BLUE_REFS" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†${NC}  Advertencia: A√∫n hay $BLUE_REFS referencias a colores blue-[789]00"
    echo "   Ejecuta: grep -r 'blue-[789]00' src/"
fi

if [ "$OLD_YELLOW" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†${NC}  Advertencia: A√∫n hay $OLD_YELLOW referencias a yellow-[45]00"
    echo "   Ejecuta: grep -r 'yellow-[45]00' src/"
fi

# Verificar que existen las nuevas clases
NEW_UPTC=$(grep -r "uptc-" src/ --include="*.tsx" --include="*.ts" 2>/dev/null | wc -l)
echo -e "${GREEN}‚úì${NC} Encontradas $NEW_UPTC referencias a clases uptc-*"

echo ""

# ==============================================
# 9. RESUMEN
# ==============================================
echo "üìä RESUMEN DE MIGRACI√ìN"
echo "================================"
echo "Archivos modificados: $CHANGES"
echo "Backup guardado en: $BACKUP_DIR"
echo ""
echo -e "${GREEN}‚úì Migraci√≥n completada${NC}"
echo ""
echo "üìù PR√ìXIMOS PASOS:"
echo "1. Revisa los cambios con: git diff"
echo "2. Prueba la aplicaci√≥n: npm run dev"
echo "3. Verifica visualmente todos los componentes"
echo "4. Si hay problemas, restaura desde: $BACKUP_DIR"
echo ""
echo "‚ö†Ô∏è  RECORDATORIOS:"
echo "‚Ä¢ Actualiza tailwind.config.ts con los colores UPTC"
echo "‚Ä¢ Actualiza globals.css con las clases de utilidad"
echo "‚Ä¢ Reemplaza componentes de layout seg√∫n la gu√≠a"
echo "‚Ä¢ Agrega el logo oficial UPTC"
echo "‚Ä¢ Incluye 'Vigilada Mineducaci√≥n' en footer"
echo ""
echo "üìö Consulta la Gu√≠a de Implementaci√≥n para m√°s detalles"